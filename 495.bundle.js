"use strict";(self.webpackChunkaddress_book=self.webpackChunkaddress_book||[]).push([[495],{283:(e,t,s)=>{s.d(t,{cI:()=>ue});var r=s(294),i=e=>"checkbox"===e.type,a=e=>e instanceof Date,n=e=>null==e;const o=e=>"object"==typeof e;var l=e=>!n(e)&&!Array.isArray(e)&&o(e)&&!a(e),u=e=>e.substring(0,e.search(/.\d/))||e,c=e=>e.filter(Boolean),d=e=>void 0===e,f=(e,t,s)=>{if(l(e)&&t){const r=c(t.split(/[,[\].]+?/)).reduce(((e,t)=>n(e)?e:e[t]),e);return d(r)||r===e?d(e[t])?s:e[t]:r}};const y="onChange",g="onSubmit",b="all",m="pattern",h="required";var v=(e,t)=>{const s=Object.assign({},e);return delete s[t],s};r.createContext(null).displayName="RHFContext";var p=e=>l(e)&&!Object.keys(e).length,_=e=>Array.isArray(e)?e:[e],O=(e,t,s,r,i)=>t?Object.assign(Object.assign({},s[e]),{types:Object.assign(Object.assign({},s[e]&&s[e].types?s[e].types:{}),{[r]:i||!0})}):{},w=e=>/^\w*$/.test(e),j=e=>c(e.replace(/["|']|\]/g,"").split(/\.|\[/));function V(e,t,s){let r=-1;const i=w(t)?[t]:j(t),a=i.length,n=a-1;for(;++r<a;){const t=i[r];let a=s;if(r!==n){const s=e[t];a=l(s)||Array.isArray(s)?s:isNaN(+i[r+1])?{}:[]}e[t]=a,e=e[t]}return e}const A=(e,t,s)=>{for(const r of s||Object.keys(e)){const s=f(e,r);if(s){const e=s._f,r=v(s,"_f");if(e&&t(e.name)){if(e.ref.focus&&d(e.ref.focus()))break;if(e.refs){e.refs[0].focus();break}}else l(r)&&A(r,t)}}};function F(e){let t;const s=Array.isArray(e);if(e instanceof Date)t=new Date(e.getTime());else{if(!s&&!l(e))return e;t=s?[]:{};for(const s in e)t[s]=F(e[s])}return t}var x=e=>n(e)||!o(e);function S(e,t){if(x(e)||x(t)||a(e)||a(t))return e===t;const s=Object.keys(e),r=Object.keys(t);if(s.length!==r.length)return!1;for(const i of s){const s=e[i];if(!r.includes(i))return!1;if("ref"!==i){const e=t[i];if((l(s)||Array.isArray(s))&&(l(e)||Array.isArray(e))?!S(s,e):s!==e)return!1}}return!0}var k=e=>({isOnSubmit:!e||e===g,isOnBlur:"onBlur"===e,isOnChange:e===y,isOnAll:e===b,isOnTouch:"onTouched"===e}),D=e=>"boolean"==typeof e,E=e=>"file"===e.type,C=e=>"function"==typeof e,M=e=>e instanceof HTMLElement,N=e=>"select-multiple"===e.type,T=e=>"radio"===e.type,B=e=>"string"==typeof e,U="undefined"!=typeof window&&void 0!==window.HTMLElement&&"undefined"!=typeof document,L=e=>!M(e)||!document.contains(e),I=(e,t)=>e.map(((e={})=>v(e,t)));class q{constructor(){this.tearDowns=[]}add(e){this.tearDowns.push(e)}unsubscribe(){for(const e of this.tearDowns)e();this.tearDowns=[]}}class P{constructor(e,t){this.observer=e,this.closed=!1,t.add((()=>this.closed=!0))}next(e){this.closed||this.observer.next(e)}}class H{constructor(){this.observers=[]}next(e){for(const t of this.observers)t.next(e)}subscribe(e){const t=new q,s=new P(e,t);return this.observers.push(s),t}unsubscribe(){this.observers=[]}}function R(e,t){const s=w(t)?[t]:j(t),r=1==s.length?e:function(e,t){const s=t.slice(0,-1).length;let r=0;for(;r<s;)e=d(e)?r++:e[t[r++]];return e}(e,s),i=s[s.length-1];let a;r&&delete r[i];for(let t=0;t<s.slice(0,-1).length;t++){let r,i=-1;const n=s.slice(0,-(t+1)),o=n.length-1;for(t>0&&(a=e);++i<n.length;){const t=n[i];r=r?r[t]:e[t],o===i&&(l(r)&&p(r)||Array.isArray(r)&&!r.filter((e=>l(e)&&!p(e)||D(e))).length)&&(a?delete a[t]:delete e[t]),a=r}}return e}const $={value:!1,isValid:!1},W={value:!0,isValid:!0};var Z=e=>{if(Array.isArray(e)){if(e.length>1){const t=e.filter((e=>e&&e.checked&&!e.disabled)).map((e=>e.value));return{value:t,isValid:!!t.length}}return e[0].checked&&!e[0].disabled?e[0].attributes&&!d(e[0].attributes.value)?d(e[0].value)||""===e[0].value?W:{value:e[0].value,isValid:!0}:W:$}return $},z=(e,{valueAsNumber:t,valueAsDate:s,setValueAs:r})=>d(e)?e:t?""===e?NaN:+e:s?new Date(e):r?r(e):e;const G={isValid:!1,value:null};var J=e=>Array.isArray(e)?e.reduce(((e,t)=>t&&t.checked&&!t.disabled?{isValid:!0,value:t.value}:e),G):G;function K(e){const t=e.ref;var s;if(!(e.refs?e.refs.every((e=>e.disabled)):t.disabled))return E(t)?t.files:T(t)?J(e.refs).value:N(t)?(s=t.options,[...s].filter((({selected:e})=>e)).map((({value:e})=>e))):i(t)?Z(e.refs).value:z(d(t.value)?e.ref.value:t.value,e)}function Q(e,t){if(x(e)||x(t))return t;for(const s in t){const r=e[s],i=t[s];try{e[s]=l(r)&&l(i)||Array.isArray(r)&&Array.isArray(i)?Q(r,i):i}catch(e){}}return e}function X(e,t,s,r,i){let a=-1;for(;++a<e.length;){for(const r in e[a])Array.isArray(e[a][r])?(!s[a]&&(s[a]={}),s[a][r]=[],X(e[a][r],f(t[a]||{},r,[]),s[a][r],s[a],r)):!n(t)&&S(f(t[a]||{},r),e[a][r])?V(s[a]||{},r):s[a]=Object.assign(Object.assign({},s[a]),{[r]:!0});r&&!s.length&&delete r[i]}return s}var Y=(e,t,s)=>Q(X(e,t,s.slice(0,e.length)),X(t,e,s.slice(0,e.length))),ee=(e,t)=>!c(f(e,t,[])).length&&R(e,t),te=e=>B(e)||r.isValidElement(e),se=e=>e instanceof RegExp;function re(e,t,s="validate"){if(te(e)||Array.isArray(e)&&e.every(te)||D(e)&&!e)return{type:s,message:te(e)?e:"",ref:t}}var ie=e=>l(e)&&!se(e)?e:{value:e,message:""},ae=async(e,t,s,r)=>{const{ref:a,refs:o,required:u,maxLength:c,minLength:d,min:f,max:y,pattern:g,validate:b,name:v,valueAsNumber:_,mount:w,disabled:j}=e._f;if(!w||j)return{};const V=o?o[0]:a,A=e=>{r&&V.reportValidity&&(V.setCustomValidity(D(e)?"":e||" "),V.reportValidity())},F={},x=T(a),S=i(a),k=x||S,M=(_||E(a))&&!a.value||""===t||Array.isArray(t)&&!t.length,N=O.bind(null,v,s,F),U=(e,t,s,r="maxLength",i="minLength")=>{const n=e?t:s;F[v]=Object.assign({type:e?r:i,message:n,ref:a},N(e?r:i,n))};if(u&&(!k&&(M||n(t))||D(t)&&!t||S&&!Z(o).isValid||x&&!J(o).isValid)){const{value:e,message:t}=te(u)?{value:!!u,message:u}:ie(u);if(e&&(F[v]=Object.assign({type:h,message:t,ref:V},N(h,t)),!s))return A(t),F}if(!(M||n(f)&&n(y))){let e,r;const i=ie(y),o=ie(f);if(isNaN(t)){const s=a.valueAsDate||new Date(t);B(i.value)&&(e=s>new Date(i.value)),B(o.value)&&(r=s<new Date(o.value))}else{const s=a.valueAsNumber||parseFloat(t);n(i.value)||(e=s>i.value),n(o.value)||(r=s<o.value)}if((e||r)&&(U(!!e,i.message,o.message,"max","min"),!s))return A(F[v].message),F}if((c||d)&&!M&&B(t)){const e=ie(c),r=ie(d),i=!n(e.value)&&t.length>e.value,a=!n(r.value)&&t.length<r.value;if((i||a)&&(U(i,e.message,r.message),!s))return A(F[v].message),F}if(g&&!M&&B(t)){const{value:e,message:r}=ie(g);if(se(e)&&!t.match(e)&&(F[v]=Object.assign({type:m,message:r,ref:a},N(m,r)),!s))return A(r),F}if(b)if(C(b)){const e=re(await b(t),V);if(e&&(F[v]=Object.assign(Object.assign({},e),N("validate",e.message)),!s))return A(e.message),F}else if(l(b)){let e={};for(const r in b){if(!p(e)&&!s)break;const i=re(await b[r](t),V,r);i&&(e=Object.assign(Object.assign({},i),N(r,i.message)),A(i.message),s&&(F[v]=e))}if(!p(e)&&(F[v]=Object.assign({ref:V},e),!s))return F}return A(!0),F};const ne={mode:g,reValidateMode:y,shouldFocusError:!0},oe="undefined"==typeof window;function le(e={}){let t,s=Object.assign(Object.assign({},ne),e),r={isDirty:!1,isValidating:!1,dirtyFields:{},isSubmitted:!1,submitCount:0,touchedFields:{},isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,errors:{}},o={},y={},g=s.defaultValues||{},m=!1,h=!1,O=0,w={mount:new Set,unMount:new Set,array:new Set,watch:new Set},j={};const q={isDirty:!1,dirtyFields:!1,touchedFields:!1,isValidating:!1,isValid:!1,errors:!1},P={watch:new H,control:new H,array:new H,state:new H},$=k(s.mode),W=k(s.reValidateMode),Z=s.criteriaMode===b,G=e=>w.watchAll||w.watch.has(e)||w.watch.has((e.match(/\w+/)||[])[0]),J=(e,t)=>{V(r.errors,e,t),P.state.next({errors:r.errors})},Q=(e,t,s={},r)=>{const a=f(o,e);if(a){const o=a._f;if(o){V(y,e,z(t,o));const a=U&&M(o.ref)&&n(t)?"":t;E(o.ref)&&!B(a)?o.ref.files=a:N(o.ref)?[...o.ref.options].forEach((e=>e.selected=a.includes(e.value))):o.refs?i(o.ref)?o.refs.length>1?o.refs.forEach((e=>e.checked=Array.isArray(a)?!!a.find((t=>t===e.value)):a===e.value)):o.refs[0].checked=!!a:o.refs.forEach((e=>e.checked=e.value===a)):o.ref.value=a,r&&P.control.next({values:ge(),name:e}),(s.shouldDirty||s.shouldTouch)&&X(e,a,s.shouldTouch),s.shouldValidate&&ye(e)}}},X=(e,t,s,i=!0)=>{const a={name:e};let n=!1;if(q.isDirty){const e=r.isDirty;r.isDirty=le(),a.isDirty=r.isDirty,n=e!==a.isDirty}if(q.dirtyFields&&!s){const s=f(r.dirtyFields,e);S(f(g,e),t)?R(r.dirtyFields,e):V(r.dirtyFields,e,!0),a.dirtyFields=r.dirtyFields,n=n||s!==f(r.dirtyFields,e)}const o=f(r.touchedFields,e);return s&&!o&&(V(r.touchedFields,e,s),a.touchedFields=r.touchedFields,n=n||q.touchedFields&&o!==s),n&&i&&P.state.next(a),n?a:{}},te=async e=>s.resolver?await s.resolver(Object.assign({},y),s.context,((e,t,s,r)=>{const i={};for(const s of e){const e=f(t,s);e&&V(i,s,e._f)}return{criteriaMode:s,names:[...e],fields:i,shouldUseNativeValidation:r}})(e||w.mount,o,s.criteriaMode,s.shouldUseNativeValidation)):{},se=async(e,t,i={valid:!0})=>{for(const a in e){const n=e[a];if(n){const e=n._f,a=v(n,"_f");if(e){const a=await ae(n,f(y,e.name),Z,s.shouldUseNativeValidation);if(a[e.name]&&(i.valid=!1,t))break;t||(a[e.name]?V(r.errors,e.name,a[e.name]):R(r.errors,e.name))}a&&await se(a,t,i)}}return i.valid},re=async({type:a,target:n,target:{value:l,name:c,type:d}})=>{const g=f(o,c);if(g){let m,h;const v=d?K(g._f):l,_="blur"===a,w=!((b=g._f).mount&&(b.required||b.min||b.max||b.maxLength||b.minLength||b.pattern||b.validate)||s.resolver||f(r.errors,c)||g._f.deps)||((e,t,s,r,i)=>!i.isOnAll&&(!s&&i.isOnTouch?!(t||e):(s?r.isOnBlur:i.isOnBlur)?!e:!(s?r.isOnChange:i.isOnChange)||e))(_,f(r.touchedFields,c),r.isSubmitted,W,$),A=!_&&G(c);V(y,c,v);const F=X(c,v,_,!1),x=!p(F)||A;if(!_&&P.watch.next({name:c,type:a}),w)return x&&P.state.next(Object.assign({name:c},A?{}:F));if(!_&&A&&P.state.next({}),j[c]=(j[c],1),q.isValidating&&P.state.next({isValidating:!0}),s.resolver){const{errors:e}=await te([c]);if(m=f(e,c),i(n)&&!m){const t=u(c),s=f(o,t);if(Array.isArray(s)&&s.every((e=>e._f&&i(e._f.ref)))){const s=f(e,t,{});s.type&&(m=s),c=t}}h=p(e)}else m=(await ae(g,f(y,c),Z,s.shouldUseNativeValidation))[c],h=await ue(!0);g._f.deps&&ye(g._f.deps),(async(s,i,a,n,o)=>{const l=f(r.errors,i),u=q.isValid&&r.isValid!==a;var c,d;if(e.delayError&&n?(t=t||(c=J,d=e.delayError,(...e)=>{clearTimeout(O),O=window.setTimeout((()=>c(...e)),d)}),t(i,n)):(clearTimeout(O),n?V(r.errors,i,n):R(r.errors,i)),((n?!S(l,n):l)||!p(o)||u)&&!s){const e=Object.assign(Object.assign(Object.assign({},o),u?{isValid:a}:{}),{errors:r.errors,name:i});r=Object.assign(Object.assign({},r),e),P.state.next(e)}j[i]--,q.isValidating&&!j[i]&&(P.state.next({isValidating:!1}),j={})})(!1,c,h,m,F)}var b},ie=(e,t,s)=>{const r=f(o,e);if(r){const i=f(y,e),a=d(i)?f(g,e):i;d(a)||t&&t.defaultChecked||s?V(y,e,s?a:K(r._f)):Q(e,a)}h&&ue()},le=(e,t)=>(e&&t&&V(y,e,t),!S(Object.assign({},ge()),g)),ue=async e=>{let t=!1;return q.isValid&&(t=s.resolver?p((await te()).errors):await se(o,!0),e||t===r.isValid||(r.isValid=t,P.state.next({isValid:t}))),t},ce=(e,t,s)=>Object.entries(t).forEach((([t,r])=>{const i=`${e}.${t}`,n=f(o,i);!w.array.has(e)&&x(r)&&(!n||n._f)||a(r)?Q(i,r,s,!0):ce(i,r,s)})),de=(e,t,s,r)=>{const i=Object.assign({},s||h?y:d(t)?g:B(e)?{[e]:t}:t);if(!e)return r&&(w.watchAll=!0),i;const a=[];for(const t of _(e))r&&w.watch.add(t),a.push(f(i,t));return Array.isArray(e)?a:a[0]},fe=(e,t="")=>{for(const s in e){const r=e[s],i=t+(t?".":"")+s,a=f(o,i);a&&a._f||(l(r)&&Object.keys(r).length||Array.isArray(r)&&r.length?fe(r,i):a||V(y,i,r))}},ye=async(e,t={})=>{const i=_(e);let a;if(P.state.next({isValidating:!0}),s.resolver){const t=await(async e=>{const{errors:t}=await te();if(e)for(const s of e){const e=f(t,s);e?V(r.errors,s,e):R(r.errors,s)}else r.errors=t;return t})(d(e)?e:i);a=e?i.every((e=>!f(t,e))):p(t)}else e?(a=(await Promise.all(i.map((async e=>{const t=f(o,e);return await se(t._f?{[e]:t}:t)})))).every(Boolean),ue()):a=await se(o);return P.state.next(Object.assign(Object.assign({},B(e)?{name:e}:{}),{errors:r.errors,isValid:a,isValidating:!1})),t.shouldFocus&&!a&&A(o,(e=>f(r.errors,e)),e?i:w.mount),a},ge=e=>{const t=Object.assign(Object.assign({},g),h?y:{});return d(e)?t:B(e)?f(t,e):e.map((e=>f(t,e)))},be=(e,t={})=>{for(const i of e?_(e):w.mount)w.mount.delete(i),w.array.delete(i),f(o,i)&&(t.keepValue||(R(o,i),R(y,i)),!t.keepError&&R(r.errors,i),!t.keepDirty&&R(r.dirtyFields,i),!t.keepTouched&&R(r.touchedFields,i),!s.shouldUnregister&&!t.keepDefaultValue&&R(g,i));P.watch.next({}),P.state.next(Object.assign(Object.assign({},r),t.keepDirty?{isDirty:le()}:{})),!t.keepIsValid&&ue()},me=(e,t={})=>{const r=f(o,e);return V(o,e,{_f:Object.assign(Object.assign(Object.assign({},r&&r._f?r._f:{ref:{name:e}}),{name:e,mount:!0}),t)}),d(t.value)||V(y,e,t.value),D(t.disabled)&&r&&V(y,e,t.disabled?void 0:f(y,e,K(r._f))),w.mount.add(e),!r&&ie(e,void 0,!0),oe?{name:e}:Object.assign(Object.assign({name:e},d(t.disabled)?{}:{disabled:t.disabled}),{onChange:re,onBlur:re,ref:r=>{if(r)((e,t,s)=>{me(e,s);let r=f(o,e);const a=d(t.value)&&t.querySelectorAll&&t.querySelectorAll("input,select,textarea")[0]||t,n=(e=>T(e)||i(e))(a);a===r._f.ref||n&&c(r._f.refs||[]).find((e=>e===a))||(r={_f:n?Object.assign(Object.assign({},r._f),{refs:[...c(r._f.refs||[]).filter((e=>M(e)&&document.contains(e))),a],ref:{type:a.type,name:e}}):Object.assign(Object.assign({},r._f),{ref:a})},V(o,e,r),(!s||!s.disabled)&&ie(e,a))})(e,r,t);else{const r=f(o,e,{}),i=s.shouldUnregister||t.shouldUnregister;r._f&&(r._f.mount=!1),i&&(!((e,t)=>[...e].some((e=>u(t)===e)))(w.array,e)||!m)&&w.unMount.add(e)}}})};return{control:{register:me,unregister:be,_getWatch:de,_getIsDirty:le,_updateValid:ue,_updateValues:fe,_removeFields:()=>{for(const e of w.unMount){const t=f(o,e);t&&(t._f.refs?t._f.refs.every(L):L(t._f.ref))&&be(e)}w.unMount=new Set},_updateFieldArray:(e,t,s,i,a=[],n=!0,l=!0)=>{let u;const c=I(a,e);if(m=!0,l&&f(o,t)&&(u=s(f(o,t),i.argA,i.argB),n&&V(o,t,u)),u=s(f(y,t),i.argA,i.argB),n&&V(y,t,u),Array.isArray(f(r.errors,t))){const e=s(f(r.errors,t),i.argA,i.argB);n&&V(r.errors,t,e),ee(r.errors,t)}if(q.touchedFields&&f(r.touchedFields,t)){const e=s(f(r.touchedFields,t),i.argA,i.argB);n&&V(r.touchedFields,t,e),ee(r.touchedFields,t)}(q.dirtyFields||q.isDirty)&&(V(r.dirtyFields,t,Y(I(c,e),f(g,t,[]),f(r.dirtyFields,t,[]))),c&&V(r.dirtyFields,t,Y(I(c,e),f(g,t,[]),f(r.dirtyFields,t,[]))),ee(r.dirtyFields,t)),P.state.next({isDirty:le(t,I(c,e)),dirtyFields:r.dirtyFields,errors:r.errors,isValid:r.isValid})},_getFieldArrayValue:e=>f(h?y:g,e,[]),_subjects:P,_shouldUnregister:s.shouldUnregister,_proxyFormState:q,get _fields(){return o},set _fields(e){o=e},get _formValues(){return y},set _formValues(e){y=e},get _isMounted(){return h},set _isMounted(e){h=e},get _defaultValues(){return g},set _defaultValues(e){g=e},get _names(){return w},set _names(e){w=e},get _isInAction(){return m},set _isInAction(e){m=e},get _formState(){return r},set _formState(e){r=e},_updateProps:e=>{s=Object.assign(Object.assign({},ne),e)}},trigger:ye,register:me,handleSubmit:(e,t)=>async i=>{i&&(i.preventDefault&&i.preventDefault(),i.persist&&i.persist());let a=!0,n=Object.assign({},y);P.state.next({isSubmitting:!0});try{if(s.resolver){const{errors:e,values:t}=await te();r.errors=e,n=t}else await se(o);p(r.errors)&&Object.keys(r.errors).every((e=>f(n,e)))?(P.state.next({errors:{},isSubmitting:!0}),await e(n,i)):(t&&await t(r.errors,i),s.shouldFocusError&&A(o,(e=>f(r.errors,e)),w.mount))}catch(e){throw a=!1,e}finally{r.isSubmitted=!0,P.state.next({isSubmitted:!0,isSubmitting:!1,isSubmitSuccessful:p(r.errors)&&a,submitCount:r.submitCount+1,errors:r.errors})}},watch:(e,t)=>C(e)?P.watch.subscribe({next:s=>e(de(void 0,t),s)}):de(e,t,!1,!0),setValue:(e,t,s={})=>{const i=f(o,e),a=w.array.has(e);V(y,e,t),a?(P.array.next({name:e,values:y}),(q.isDirty||q.dirtyFields)&&s.shouldDirty&&(V(r.dirtyFields,e,Y(t,f(g,e,[]),f(r.dirtyFields,e,[]))),P.state.next({name:e,dirtyFields:r.dirtyFields,isDirty:le(e,t)}))):!i||i._f||n(t)?Q(e,t,s,!0):ce(e,t,s),G(e)&&P.state.next({}),P.watch.next({name:e})},getValues:ge,reset:(t,s={})=>{const i=t||g,a=F(i);if(s.keepValues||(y=e.shouldUnregister?{}:a),U&&!s.keepValues)for(const e of w.mount){const t=f(o,e);if(t&&t._f){const e=Array.isArray(t._f.refs)?t._f.refs[0]:t._f.ref;try{M(e)&&e.closest("form").reset();break}catch(e){}}}s.keepDefaultValues||(g=Object.assign({},i)),s.keepValues||(o={},P.control.next({values:s.keepDefaultValues?g:Object.assign({},i)}),P.watch.next({}),P.array.next({values:a})),w={mount:new Set,unMount:new Set,array:new Set,watch:new Set,watchAll:!1,focus:""},P.state.next({submitCount:s.keepSubmitCount?r.submitCount:0,isDirty:s.keepDirty?r.isDirty:!!s.keepDefaultValues&&S(t,g),isSubmitted:!!s.keepIsSubmitted&&r.isSubmitted,dirtyFields:s.keepDirty?r.dirtyFields:{},touchedFields:s.keepTouched?r.touchedFields:{},errors:s.keepErrors?r.errors:{},isSubmitting:!1,isSubmitSuccessful:!1}),h=!q.isValid||!!s.keepIsValid},clearErrors:e=>{e?_(e).forEach((e=>R(r.errors,e))):r.errors={},P.state.next({errors:r.errors})},unregister:be,setError:(e,t,s)=>{const i=(f(o,e,{_f:{}})._f||{}).ref;V(r.errors,e,Object.assign(Object.assign({},t),{ref:i})),P.state.next({name:e,errors:r.errors,isValid:!1}),s&&s.shouldFocus&&i&&i.focus&&i.focus()},setFocus:e=>f(o,e)._f.ref.focus()}}function ue(e={}){const t=r.useRef(),[s,i]=r.useState({isDirty:!1,isValidating:!1,dirtyFields:{},isSubmitted:!1,submitCount:0,touchedFields:{},isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,errors:{}});t.current?t.current.control._updateProps(e):t.current=Object.assign(Object.assign({},le(e)),{formState:s});const a=t.current.control;return r.useEffect((()=>{const e=a._subjects.state.subscribe({next(e){((e,t,s)=>{const r=v(e,"name");return p(r)||Object.keys(r).length>=Object.keys(t).length||Object.keys(r).find((e=>t[e]===(!s||b)))})(e,a._proxyFormState,!0)&&(a._formState=Object.assign(Object.assign({},a._formState),e),i(Object.assign({},a._formState)))}});return()=>{e.unsubscribe()}}),[a]),r.useEffect((()=>{a._isMounted||(a._isMounted=!0,a._proxyFormState.isValid&&a._updateValid(),!e.shouldUnregister&&a._updateValues(a._defaultValues)),a._removeFields()})),t.current.formState=((e,t,s,r=!0)=>{function i(i){return()=>{if(i in e)return t[i]!==b&&(t[i]=!r||b),s&&(s[i]=!0),e[i]}}const a={};for(const t in e)Object.defineProperty(a,t,{get:i(t)});return a})(s,a._proxyFormState),t.current}},942:(e,t,s)=>{function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}s.d(t,{Z:()=>r})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,